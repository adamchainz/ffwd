#!/usr/bin/env python
"""A reference tunneling proxy for EVD."""

import time
import base64
import json
import asyncore
import sys
import socket
import logging

log = logging.getLogger(__name__)

UDP = 'udp'
TCP = 'tcp'
RECV_MAX = 8192


class _TunnelBindUDP(asyncore.dispatcher):
    def __init__(self, tunnel, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.set_reuse_addr()
        self.bind(('127.0.0.1', port))

        self._tunnel = tunnel
        self._port = port

    def handle_read(self):
        """implement asyncore.dispatcher#handle_read"""
        data, addr = self.recvfrom(RECV_MAX)
        self._tunnel.receive_client_data(UDP, self._port, addr, data)

    def tunnel_send_data(self, addr, data):
        self.sendto(data, addr)


class _TunnelBindTCP(asyncore.dispatcher):
    class Connection(asyncore.dispatcher_with_send):
        def __init__(self, tunnel, sock, addr):
            asyncore.dispatcher_with_send.__init__(self, sock)
            self.tunnel = tunnel
            self.addr = addr

        def handle_close(self):
            """implement asyncore.dispatcher_with_send#handle_close."""
            self.tunnel.connection_close(self.addr)

        def handle_error(self):
            """implement asyncore.dispatcher_with_send#handle_error."""
            self.tunnel.connection_close(self.addr)

        def handle_read(self):
            """implement asyncore.dispatcher#handle_read."""
            self.tunnel.client_receive_data(self.addr, self.recv(RECV_MAX))

    def __init__(self, tunnel, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind(('127.0.0.1', port))
        self.listen(5)

        self._tunnel = tunnel
        self._port = port
        self._connections = dict()

    def client_receive_data(self, addr, data):
        """Receive data from TCP connections."""
        if len(data) > 0:
            self._tunnel.receive_client_data(TCP, self._port, addr, data)

    def handle_close(self):
        """implement asyncore.dispatcher#handle_close."""
        self.close()

    def handle_accept(self):
        """implement asyncore.dispatcher#handle_accept."""
        pair = self.accept()

        if pair is not None:
            sock, addr = pair
            self._connections[addr] = self.Connection(self, sock, addr)

    def connection_close(self, addr):
        """Remove the client connection associated with addr."""
        client = self._connections[addr]
        client.close()
        del self._connections[addr]

    def close(self):
        for client in self._connections.values():
            client.close()

        self._connections = {}
        asyncore.dispatcher.close(self)

    def tunnel_send_data(self, addr, data):
        try:
            client = self._connections[addr]
        except KeyError:
            log.error("no such client: %s", addr)
            return

        client.send(data)


class _LineProtocol(object):
    delimiter = '\n'

    def __init__(self):
        self._in_buffer = ""

    def handle_read(self):
        """implement asyncore.dispatcher#handle_read."""

        data = self.recv(RECV_MAX)

        while True:
            try:
                i = data.index(self.delimiter)
            except ValueError:
                break

            try:
                self.receive_line(self._in_buffer + data[:i])
            except:
                log.error("receive_line failed", exc_info=sys.exc_info())

            self._in_buffer = ""
            data = data[i + 2:]

        if len(data) > 0:
            self._in_buffer += data

    def send_line(self, line):
        """Send a line of data using the specified delimiter."""
        self.send(line + self.delimiter)


BIND_PROTOCOLS = {
    TCP: _TunnelBindTCP,
    UDP: _TunnelBindUDP,
}


class _TunnelClient(_LineProtocol, asyncore.dispatcher_with_send):
    def __init__(self, metadata, protocol=TCP):
        asyncore.dispatcher_with_send.__init__(self)
        _LineProtocol.__init__(self)

        if protocol == TCP:
            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        else:
            self.create_socket(socket.AF_INET, socket.SOCK_DGRAM)

        self._protocol_type = None
        self._metadata = metadata
        self._config = None
        self._servers = dict()

    def handle_error(self):
        """implement asyncore.dispatcher#handle_error."""
        exc_info = sys.exc_info()
        log.error("error: %s", str(exc_info[1]), exc_info=exc_info)
        self.close()

    def handle_close(self):
        """implement asyncore.dispatcher#handle_close."""
        log.info("closed")
        self.close()

    def close(self):
        for server in self._servers.values():
            server.close()

        self._servers = dict()
        self._config = None

        asyncore.dispatcher_with_send.close(self)

    def receive_client_data(self, protocol, port, addr, data):
        """Handle data received by a connected client."""
        data = base64.b64encode(data)
        peer = "%s:%d" % (addr[0], addr[1])
        self.send_line("%s %s %s %s" % (protocol, port, peer, data))

    def handle_connect(self):
        """implement asyncore.dispatcher#handle_connect."""
        log.info("connected")
        self.send_line(json.dumps(self._metadata))

    def receive_line(self, line):
        """implement _LineProtocol#receive_line."""
        if self._config is None:
            self._config = json.loads(line)
            self._protocol_type = self._config.get('type', 'text')

            if self._protocol_type == 'text':
                pass
            else:
                self.close()
                return

            self._bind_all()
            return

        self._outbound_traffic(line)

    def _outbound_traffic(self, line):
        protocol, port, addr, data = line.split(' ', 4)

        try:
            port = int(port)
            data = base64.b64decode(data)
            peer_host, peer_port = addr.split(':', 2)
            peer_port = int(peer_port)
        except:
            log.error("received invalid frame")
            return

        server_id = (protocol, port)

        try:
            server = self._servers[server_id]
        except KeyError:
            log.error("no such server: %s", server_id)
            return

        peer = (peer_host, peer_port)
        server.tunnel_send_data(peer, data)

    def _bind_all(self):
        """Bind all protocol/port combinations from configuration."""
        log.info("CONFIG: %s", repr(self._config))

        bind = self._config.get('bind', [])

        for b in bind:
            server_id = (b['protocol'], b['port'])
            protocol, port = server_id

            if server_id in self._servers:
                log.error("already bound: %s", repr(server_id))
                continue

            try:
                server = BIND_PROTOCOLS[protocol](self, port)
                self._servers[server_id] = server
            except:
                log.error("failed to bind: %s", repr(b),
                          exc_info=sys.exc_info())
                continue

        if len(self._servers) != len(bind):
            log.error("unable to bind everything: %s", repr(bind))
            self.close()


def _main(args):
    logging.basicConfig(level=logging.INFO)

    if len(args) > 0:
        with open(args[0]) as f:
            metadata = json.load(f)
    else:
        metadata = dict()

    addr = ('127.0.0.1', 9000)

    reconnect_timeout = 1.0

    while True:
        client = _TunnelClient(metadata)
        client.connect(addr)

        asyncore.loop()

        log.info("reconnecting in %ds", reconnect_timeout)
        time.sleep(reconnect_timeout)

if __name__ == "__main__":
    sys.exit(_main(sys.argv[1:]))
